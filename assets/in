#!/usr/bin/env bash

function stop_ssh_agent()
{
    [ ! -z "$SSH_AGENT_PID" ] && kill $SSH_AGENT_PID
}

trap stop_ssh_agent EXIT
trap stop_ssh_agent SIGINT SIGTERM

DEST_DIR=$1
echo $SRC_DIR 1>&2
echo $BUILD_ID 1>&2
echo $BUILD_NAME 1>&2
echo $BUILD_JOB_NAME 1>&2
echo $BUILD_PIPELINE_NAME 1>&2
echo $ATC_EXTERNAL_URL 1>&2

PLATFORM=`uname`

MAX_RETRIES=10
SLEEP_TIME=10

SCRIPT_INPUT='/tmp/input'
cat > $SCRIPT_INPUT <&0 # STDIN params

SERVER=$(jq -r '(.source.servers + [.source.server])[0]' < $SCRIPT_INPUT)
PORT=$(jq -r '.source.port // ""' < $SCRIPT_INPUT)
BASE_DIR=$(jq -r '.source.base_dir // ""' < $SCRIPT_INPUT)
USER=$(jq -r '.source.user // ""' < $SCRIPT_INPUT)
EXCLUDE=$(jq -r '.source.exclude // ""' < $SCRIPT_INPUT)
VERSION=$(jq -r '.version.ref // ""' < $SCRIPT_INPUT)
RSYNC_OPTS_ARR=$(jq -r '.params.rsync_opts // ""' < $SCRIPT_INPUT)

jq -re '.source.disable_version_path' < $SCRIPT_INPUT >/dev/null
# a little tricky: 0 is the status code that says that we found the entry.  It's inverted logic.
DISABLE_VERSION_PATH=$?

# imitating docker resource: provide a way to do a one-way sync.
#    This should really only be used when the output will not be consumed as a
#    resource later in a given job.
skip_download="$(jq -r '.params.skip_download // false' < $SCRIPT_INPUT)"

if [ "$skip_download" = "false" ]; then
    ## check if port is set in the configuration and
    ## use default SSH port number 22 otherwise
    if [ -z "$PORT" ]; then
        PORT=22
    fi

    if [ -z "$RSYNC_OPTS_ARR" ]
    then
        RSYNC_OPTS="-Pav"
    else
        RSYNC_OPTS=$(jq -r 'join(" ")' <<< $RSYNC_OPTS_ARR)
    fi

    echo $SCRIPT_INPUT 1>&2
    echo $SERVER       1>&2
    echo $PORT         1>&2
    echo $BASE_DIR     1>&2
    echo $USER         1>&2
    echo $VERSION      1>&2
    echo $EXCLUDE      1>&2

    mkdir -p ~/.ssh
    (jq -r '.source.private_key // empty' < $SCRIPT_INPUT) > ~/.ssh/server_key
    echo -e "Host $SERVER\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
    chmod -R 600 ~/.ssh

    eval $(ssh-agent) 1>&2 >/dev/null
    SSH_ASKPASS=/opt/resource/askpass.sh DISPLAY= ssh-add ~/.ssh/server_key 1>&2 >/dev/null

    if [ "$DISABLE_VERSION_PATH" -eq "0" ]
    then
        # any version is already rolled in
        SRC_DIR=$BASE_DIR
    else
        SRC_DIR=$BASE_DIR/$VERSION
    fi

    echo $SRC_DIR 1>&2

    EXCLUDE=$(echo ${EXCLUDE} \
      | sed -e 's/ /\\|/g' \
            -e 's/\./\\\./g' \
            -e 's/\*/\.\*/g')
    EXCLUDE_FILTER=""
    if [ -n $EXCLUDE_FILTER ]; then
      EXCLUDE_FILTER="! -regex \".*/\(${EXCLUDE}\)\""
    fi

    if [[ -z "$VERSION" && "$DISABLE_VERSION_PATH" -eq "1" ]]; then
    echo "ERROR Version specification $VERSION invalid!" 1>&2
    exit 1
    else
    if (ssh -t -i ~/.ssh/server_key -p $PORT $USER@$SERVER '[ -d $SRC_DIR ]' ); then
        RSYNC_CMD="rsync $RSYNC_OPTS -e 'ssh -i ~/.ssh/server_key -p $PORT' $USER@$SERVER:$SRC_DIR/* $DEST_DIR"
        echo $RSYNC_CMD  1>&2
        eval $RSYNC_CMD  1>&2

        if [ $? -eq 0 ]; then
            TIMESTAMP=$(find $DEST_DIR -type f ${EXCLUDE_FILTER} -printf '%T@\n' | cut -d. -f1 | sort -n | tail -1)
            OUTPUT_STRING="{ \"version\": { \"ref\": \"$TIMESTAMP\"} }"
            echo $OUTPUT_STRING
            exit 0
        fi

        i=0
        while [ $? -ne 0 -a $i -lt $MAX_RETRIES ]
        do
            if [ $? -eq 0 ]; then
                TIMESTAMP=$(find $DEST_DIR -type f ${EXCLUDE_FILTER} -printf '%T@\n' | cut -d. -f1 | sort -n | tail -1)
                OUTPUT_STRING="{ \"version\": { \"ref\": \"$TIMESTAMP\"} }"
                echo $OUTPUT_STRING
                exit 0
            else
                echo "Command failed - retrying in $SLEEP_TIME..."
                sleep $SLEEP_TIME
                i=$(($i+1))
                eval $COMMAND

                echo $RSYNC_CMD  1>&2
                eval $RSYNC_CMD  1>&2
            fi

        done

        if [ $i -eq $MAX_RETRIES ]
        then
            echo "Max retries reached"
            exit 1
        fi
    else
        echo "Version $VERSION no longer available in $BASE_DIR" 1>&2
        exit 1
    fi
    fi
else
    # skipped get due to skip_download=True
    echo "{ \"version\": { \"ref\": \"\" } }"
fi

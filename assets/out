#!/usr/bin/env bash

function stop_ssh_agent()
{
    [ ! -z "$SSH_AGENT_PID" ] && kill $SSH_AGENT_PID
}

trap stop_ssh_agent EXIT
trap stop_ssh_agent SIGINT SIGTERM

SRC_DIR=$1
echo $SRC_DIR 1>&2
echo $BUILD_ID 1>&2
echo $BUILD_NAME 1>&2
echo $BUILD_JOB_NAME 1>&2
echo $BUILD_PIPELINE_NAME 1>&2
echo $ATC_EXTERNAL_URL 1>&2

PLATFORM=`uname`

MAX_RETRIES=10
SLEEP_TIME=10

MD5_TOOL="md5sum"
if [ $PLATFORM = "Darwin" ]; then
  MD5_TOOL="md5"
fi

echo $MD5_TOOL 1>&2

SCRIPT_INPUT='/tmp/input'
cat > $SCRIPT_INPUT <&0 # STDIN params

SERVERS=$(jq -r '.source.servers + [.source.server]|join(" ")'< $SCRIPT_INPUT)
PORT=$(jq -r '.source.port // ""' < $SCRIPT_INPUT)
BASE_DIR=$(jq -r '.source.base_dir // ""' < $SCRIPT_INPUT)
USER=$(jq -r '.source.user // ""' < $SCRIPT_INPUT)
EXCLUDE=$(jq -r '.source.exclude // ""' < $SCRIPT_INPUT)
SYNC_DIR=$(jq -r '.params.sync_dir // ""' < $SCRIPT_INPUT)
RSYNC_OPTS_ARR=$(jq -r '.params.rsync_opts // ""' < $SCRIPT_INPUT)
jq -re '.source.disable_version_path' < $SCRIPT_INPUT >/dev/null
DISABLE_VERSION_PATH=$?

jq -re '.source.version_ref' < $SCRIPT_INPUT >/dev/null

if [ $? -eq 1 ]; then
    # next best thing is timestamp of latest file
    echo "No version ref found in parameters; using latest timestamp" 1>&2
    VERSION_REF=$(find "$SRC_DIR/$SYNC_DIR" -type f ${EXCLUDE_FILTER} -printf '%T@\n' | cut -d. -f1 | sort -n | tail -1)
else
    VERSION_REF=$(jq -re '.source.version_ref // ""' < $SCRIPT_INPUT)
    echo "Found version_ref in params.  Value: ${VERSION_REF}" 1>&2
fi

EXCLUDE=$(echo ${EXCLUDE} \
  | sed -e 's/ /\\|/g' \
        -e 's/\./\\\./g' \
        -e 's/\*/\.\*/g')
EXCLUDE_FILTER=""
if [ -n "${EXCLUDE}" ]; then
  EXCLUDE_FILTER="! -regex \".*/\(${EXCLUDE}\)\""
fi

if [ -z "$RSYNC_OPTS_ARR" ]
then
    RSYNC_OPTS="-Pav"
else
    RSYNC_OPTS=$(jq -r 'join(" ")' <<< $RSYNC_OPTS_ARR)
fi

## check if port is set in the configuration and
## use default SSH port number 22 otherwise
if [ -z "$PORT" ]; then
    PORT=22
fi

echo $SCRIPT_INPUT 1>&2
echo $SERVERS      1>&2
echo $PORT         1>&2
echo $BASE_DIR     1>&2
echo $USER         1>&2
echo $SYNC_DIR     1>&2
echo "DISABLE_VERSION_PATH=$DISABLE_VERSION_PATH" 1>&2

mkdir -p ~/.ssh
(jq -r '.source.private_key // empty' < $SCRIPT_INPUT) > ~/.ssh/server_key
for SERVER in $SERVERS
do
    echo -e "Host $SERVER\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
done

chmod -R 600 ~/.ssh

eval $(ssh-agent) 1>&2 2>/dev/null
SSH_ASKPASS=/opt/resource/askpass.sh DISPLAY= ssh-add ~/.ssh/server_key 1>&2 2>/dev/null

# Create the new directory for this build
if [ $DISABLE_VERSION_PATH -eq 0 ]
then
    DEST_DIR=$BASE_DIR
else
    DEST_DIR=$BASE_DIR/$TIMESTAMP
fi

echo $DEST_DIR 1>&2

REPORTED_VERSION=0
for SERVER in $SERVERS
do
    CMD="ssh -i ~/.ssh/server_key -p $PORT $USER@$SERVER mkdir -p $DEST_DIR"
    echo $CMD 1>&2
    eval $CMD 1>&2

    if [ $? -eq 0 ]; then
        RSYNC_CMD="rsync $RSYNC_OPTS -e 'ssh -i ~/.ssh/server_key -p $PORT' $SRC_DIR/$SYNC_DIR/ $USER@$SERVER:$DEST_DIR"
        echo $RSYNC_CMD 1>&2
        eval $RSYNC_CMD 1>&2

        if [ $REPORTED_VERSION -eq 0 ]
        then
            OUTPUT_STRING="{ \"version\": { \"ref\": \"$VERSION_REF\"} }"
            echo "DEBUG: outputting $OUTPUT_STRING to concourse" 1>&2
            echo $OUTPUT_STRING
            REPORTED_VERSION=1
            exit 0
        fi

        i=0

        while [ $? -ne 0 -a $i -lt $MAX_RETRIES -a REPORTED_VERSION=0 ]
        do
            if [ $? -eq 0 ]; then
                if [ $REPORTED_VERSION -eq 0 ]
                then
                    OUTPUT_STRING="{ \"version\": { \"ref\": \"$VERSION_REF\"} }"
                    echo "DEBUG: outputting $OUTPUT_STRING to concourse" 1>&2
                    echo $OUTPUT_STRING
                    REPORTED_VERSION=1
                fi
            fi

            echo "Command failed - retrying in $SLEEP_TIME..."
            sleep $SLEEP_TIME
            echo $RSYNC_CMD 1>&2
            eval $RSYNC_CMD  1>&2
        done
        if [ $i -eq $MAX_RETRIES ]
        then
            echo "Max retries reached"
            exit 1
        fi
    else
        echo "Failed to create destination $DEST_DIR" 1>&2
        exit 1
    fi
done
